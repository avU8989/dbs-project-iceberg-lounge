CREATE TABLE person(
    person_id INTEGER GENERATED BY DEFAULT AS IDENTITY,
    vorname VARCHAR(30),
    nachname VARCHAR(30),
    strasse VARCHAR(50),
    plz NUMBER(5),
    PRIMARY KEY(person_id)
);

CREATE TABLE kunde(
    person_id INTEGER,
    KNr INTEGER UNIQUE NOT NULL,
    iban VARCHAR(45) UNIQUE NOT NULL,
    telefonnummer VARCHAR(20) NULL,
    PRIMARY KEY(person_id, KNr),
    CONSTRAINT kunde_fk_person FOREIGN KEY(person_id) REFERENCES person(person_id) ON DELETE CASCADE
);

CREATE TABLE plz(
    plz VARCHAR(7),
    ort CHAR(60),
    PRIMARY KEY(plz)
);

CREATE TABLE bestellung(
    bestellnummer INTEGER GENERATED BY DEFAULT AS IDENTITY,
    bestelldatum DATE,
    bestellknr INTEGER,
    warenkorb INTEGER,
    PRIMARY KEY(bestellnummer),
    FOREIGN KEY(warenkorb) REFERENCES warenkorb(wnummer),
    FOREIGN KEY(bestellknr) REFERENCES kunde(KNr)
);

CREATE TABLE bestellte_artikel(
    positionsnummer INTEGER GENERATED BY DEFAULT AS IDENTITY,
    bestellnummer_fk INTEGER,
    artikelnummer_fk INTEGER,
    menge INT,
    versandkosten FLOAT,
    code VARCHAR(20) NULL,
    PRIMARY KEY(positionsnummer, bestellnummer_fk),
    FOREIGN KEY(artikelnummer_fk) REFERENCES artikel(artikelnummer) ON DELETE CASCADE,
    FOREIGN KEY(bestellnummer_fk) REFERENCES bestellung(bestellnummer) ON DELETE CASCADE
);

CREATE TABLE warenkorb(
    wnummer INTEGER GENERATED BY DEFAULT AS IDENTITY,
    artikelnummer_fk INTEGER,
    kunde_fk INTEGER ,
    menge INTEGER,
    PRIMARY KEY(wnummer),
    FOREIGN KEY (artikelnummer_fk) REFERENCES ARTIKEL(artikelnummer),
    FOREIGN KEY (kunde_fk) REFERENCES KUNDE(KNr) ON DELETE CASCADE
);
CREATE TABLE benutzer(
    benutzerid INTEGER GENERATED BY DEFAULT AS IDENTITY UNIQUE,
    benutzername VARCHAR(50) UNIQUE NOT NULL,
    passwort VARCHAR(255) UNIQUE NOT NULL,
    email VARCHAR(60) UNIQUE NOT NULL,
    benutzerguthaben FLOAT,
    kundennummer_fk INTEGER UNIQUE,
    PRIMARY KEY(benutzerid, kundennummer_fk, benutzername),
    FOREIGN KEY(kundennummer_fk) REFERENCES kunde(KNr) ON DELETE CASCADE
);

CREATE TABLE mitarbeiter(
    person_id INTEGER,
    vorgesetzter INTEGER NULL,
    einkommen FLOAT,
    SVNr NUMBER(10) UNIQUE NOT NULL,
    PRIMARY KEY (person_id, SVNr),
    FOREIGN KEY(person_id) REFERENCES person(person_id) ON DELETE CASCADE,
    FOREIGN KEY(vorgesetzter) REFERENCES mitarbeiter(SVNr)
);

CREATE TABLE rücksendegenehmigung(
    rsnummer INTEGER,
    rsdatum DATE,
    rsbestellnummer INTEGER,
    PRIMARY KEY(rsnummer),
    FOREIGN KEY(rsbestellnummer) REFERENCES bestellung(bestellnummer)
);

CREATE TABLE rÜcksendung(
    KNr INTEGER,
    rücksendegenehmiungsnummer INTEGER,
    personalnummer INTEGER,
    rsdatum DATE,
    PRIMARY KEY(KNr, rücksendegenehmiungsnummer, personalnummer),
    CONSTRAINT ruecksendung_fk_bestellung FOREIGN KEY(rücksendegenehmiungsnummer) REFERENCES rücksendegenehmigung(rsnummer),
    CONSTRAINT ruecksendung_fk_mitarbeiter FOREIGN KEY(personalnummer) REFERENCes mitarbeiter(SVNr),
    FOREIGN KEY(KNr) REFERENCES kunde(Knr)
);


CREATE TABLE lagert(
    artikelnummer_fk INTEGER,
    lagernummer_fk INTEGER,
    menge INTEGER,
    PRIMARY KEY(artikelnummer_fk, lagernummer_fk),
    FOREIGN KEY(artikelnummer_fk) REFERENCES artikel(artikelnummer),
    FOREIGN KEY(lagernummer_fk) REFERENCES lager(lagernummer)
);

CREATE TABLE verkäufer(
    u_ID INTEGER,
    name VARCHAR(30),
    branche CHAR(40),
    strasse VARCHAR(30),
    plz VARCHAR(7),
    PRIMARY KEY(u_ID)
);

CREATE TABLE bereitstellung(
    artikelnummer_fk INTEGER,
    VKnr_fk INTEGER,
    menge INTEGER,
    PRIMARY KEY(artikelnummer_fk, VKnr_fk),
    FOREIGN KEY(artikelnummer_fk) REFERENCES artikel(artikelnummer),
    FOREIGN KEY(VKnr_fk) REFERENCES verkäufer(u_ID)
);

CREATE TABLE artikel(
    artikelnummer INTEGER GENERATED ALWAYS AS IDENTITY,
    preis FLOAT,
    bezeichnung VARCHAR(70),
    typ VARCHAR(50),
    PRIMARY KEY(artikelnummer)
);

CREATE TABLE rabatt(
    typ CHAR(30),
    rabatt INTEGER,
    discount_code VARCHAR(20) UNIQUE,
    PRIMARY KEY(typ)
);

CREATE TABLE lager(
    lagernummer INTEGER,
    strasse VARCHAR(40),
    plz VARCHAR(7),
    lagerkapazität INTEGER,
    PRIMARY KEY(lagernummer)
);

CREATE TABLE artikel_bild(
    art_bildnr       INTEGER GENERATED BY DEFAULT AS IDENTITY,
    artikelnummer_fk INTEGER,
    files         VARCHAR(200),
    PRIMARY KEY (art_bildnr, artikelnummer_fk),
    FOREIGN KEY (artikelnummer_fk) REFERENCES ARTIKEL(artikelnummer)
);

CREATE VIEW shoppingcart AS
SELECT benutzername as Username, bezeichnung AS Produktname
FROM warenkorb w INNER JOIN benutzer b ON w.kunde_fk = b.kundennummer_fk
INNER JOIN artikel a
ON a.artikelnummer = w.artikelnummer_fk
;
/*Diese View zeigt welche Produkte welcher User gerade in seinem Einkaufswagen hat*/


CREATE VIEW quantityOfProductCategories AS
SELECT typ as Kategorie, COUNT(artikelnummer) AS Anzahl
FROM artikel
GROUP BY typ
;
/*Diese View zeigt die Menge der Artikel von den jeweiligen Produktkategorie*/

CREATE SEQUENCE seq_kundennummer
    INCREMENT BY 1
    START WITH 1000;

CREATE OR REPLACE TRIGGER trigger_kundennummer
    BEFORE INSERT ON kunde
    FOR EACH ROW
DECLARE
my_seq kunde.KNr%type;
BEGIN
SELECT seq_kundennummer.nextval INTO my_seq FROM dual;
:new.KNr := my_seq;
end;
/

CREATE OR REPLACE PROCEDURE delete_quantity_0 (artikelnummer IN INTEGER)
IS
quantity warenkorb.menge%TYPE;
BEGIN
    SELECT MENGE INTO quantity
    FROM WARENKORB
        WHERE artikelnummer_fk = artikelnummer;

    IF(quantity = 0)
        THEN
        DELETE FROM WARENKORB WHERE menge = 0;
    end if;
end;

UPDATE WARENKORB SET MENGE = 0 WHERE ARTIKELNUMMER_FK = 3;

CREATE OR REPLACE TRIGGER check_duplicates
    BEFORE INSERT OR UPDATE OR DELETE ON PERSON
    FOR EACH ROW
    WHEN (NEW.person_id > 0)
DECLARE
    p_count number := 0;
BEGIN
    select COUNT(*) INTO p_count
    FROM person
    WHERE vorname = :NEW.VORNAME AND nachname =:NEW.NACHNAME AND strasse =:NEW.STRASSE;

    if p_count  > 0
    THEN
        RAISE_APPLICATION_ERROR(-20202, 'PERSON WITH NAME '||:NEW.vorname||' '||:NEW.nachname||' ALREADY EXISTS. PLEASE CHECK.');
    end if;
END;
/
